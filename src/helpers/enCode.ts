export const txtEnCode = (inCode: string, passCode: string) => {
  //Так как сам результат может содержать нежелательные символы, эта переменная содержит символы с помощью которых мы будем выдавать закодированный результат, который вдальнейшем сможем отправить без особых хлопот
  let b52 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  //Эти переменные будут меняться в процессе кодировки и создавать мешанину каждого кодируемого символа в отдельности
  let maxPC = 0;
  let ifPC = 0;
  //Уникализируем переменную maxPC. Ее значение будет происходить от суммы каждого юникодного значения символов пароля
  for (let i = 0; i < passCode.length; i++) maxPC += passCode.charCodeAt(i);
  //Значение maxPCmod будет меняться на убывание, опять же в зависимости от юникодного значения символа пароля
  //А вот значение maxPC сохраним, оно понадобиться вдальнейшем, чтобы присвоить переменной maxPCmod новое значение, когда то будет меньше 0.
  let maxPcMod = maxPC;
  //Результат кодируемой строки. Изначально равно пустоте.
  let rexCode = "";
  //Переменная содержит первый символ пароля: passCode.charCodeAt(numPC)
  //С ее помощью будем перебирать пароль и перемешивать его с символом строки
  let numPC = 0;
  //Перебираем каждый символ строки
  for (let i = 0; i < inCode.length; i++) {
    //Если все символы пароля перемешаны, начинаем перебор пароля с первого символа
    if (numPC === passCode.length) numPC = 0;
    //Присвоиваем переменной maxPcMod новое значение, если оно меньше нуля.
    if (maxPcMod < 1) maxPcMod = maxPC + ifPC;
    //Эта переменная нужна для создания уникального значения maxPCmod, и как следствие уникального символа, с которым будет перемешиваться символ исходной строки.
    // Получаем ее путем деления по модулю значений maxPCmod и текущего используемого юникодного значения символа пароля
    //В целом постоянная мешанина переменных maxPCmod, maxPC и ifPC позволяет кодировать каждый отдельный символ исходной строки с уникальным значением, что подразумевает невозможность отследить какую-либо синхронизацию алгоритма
    ifPC += maxPcMod % passCode.charCodeAt(numPC);
    //Создаем непосредственно символ, с которым и будем перемешивать текущий символ строки
    let isCode = maxPcMod % passCode.charCodeAt(numPC);
    //Создаем мешанину, путем сложения предыдущей переменной с переменной текущего символа
    let nCode = inCode.charCodeAt(i) + isCode;
    //Уменьшаем значение maxPcMod для ее дальнейшей уникализации
    maxPcMod -= passCode.charCodeAt(numPC);
    //Переходим к следующему символу пароля
    numPC++;
    //Это будет уникальный номер текущего символа.
    //При делении закодированного символа на 52 число означает неполное частно, а буква остаток.
    //Например 22С означает 22*52+2, так как С второй по счету символ начиная с нуля.
    rexCode +=
      parseInt(String(nCode / 52)) + b52.charAt(parseInt(String(nCode % 52)));
  }
  //Возвращаем закодированную строку
  return rexCode;
};
